<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>PAT_1024</title>
      <link href="/2021/08/15/pat-1024/"/>
      <url>/2021/08/15/pat-1024/</url>
      
        <content type="html"><![CDATA[<h3 id="1024-Palindromic-Number-25-分"><a href="#1024-Palindromic-Number-25-分" class="headerlink" title="1024 Palindromic Number (25 分)"></a>1024 Palindromic Number (25 分)</h3><p>给一个数，以及最大步长，判断在步长内能否达到回文，若能输出回文以及实际步长，若不能则输出最后的实际数。</p><blockquote><p>input: 67   3</p><p>output: 484</p><p>2</p><p>input: 69   3</p><p>output: 1353</p><p>3</p></blockquote><p>巨简单的题面，当模拟题做即可，此题能作25分档的题我认为原因在于有坑。</p><p>按照题目的数据规模描述：</p><blockquote><p>Each input file contains one test case. Each case consists of two positive numbers N and K, where N (≤10^10) is the initial numer and K (≤100) is the maximum number of steps. The numbers are separated by a space.</p></blockquote><p>其实还是较为清晰的。10^10的N，最坏情况下显然最终的结果到了（10^10） <em> （2^100），起初对该规模判断错误，我以为会是10^10 </em> 100 = 10^12。</p><h4 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token macro property">#<span class="token directive keyword">define</span> LL long long</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>string <span class="token function">add</span><span class="token punctuation">(</span>string aa<span class="token punctuation">,</span> string bb<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 大整数相加</span><span class="token keyword">bool</span> <span class="token function">judge</span><span class="token punctuation">(</span>string str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 判断是否回文</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    string str<span class="token punctuation">,</span> ans<span class="token punctuation">,</span> t<span class="token punctuation">;</span>    <span class="token keyword">int</span> step <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> lim<span class="token punctuation">;</span>    cin <span class="token operator">>></span> str <span class="token operator">>></span> lim<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>lim<span class="token punctuation">)</span><span class="token punctuation">{</span>        ans <span class="token operator">=</span> str<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">judge</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token function">reverse</span><span class="token punctuation">(</span>ans<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ans<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        str <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span>        lim<span class="token operator">--</span><span class="token punctuation">;</span>        step<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> str <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> step<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">bool</span> <span class="token function">judge</span><span class="token punctuation">(</span>string str<span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>     <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">!=</span> str<span class="token punctuation">[</span>j<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span>string <span class="token function">add</span><span class="token punctuation">(</span>string aa<span class="token punctuation">,</span> string bb<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> len1<span class="token operator">=</span>aa<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> len2<span class="token operator">=</span>bb<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">reverse</span><span class="token punctuation">(</span>aa<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> aa<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">reverse</span><span class="token punctuation">(</span>bb<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> bb<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>len1 <span class="token operator">&lt;</span> len2<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 个数在前，字符在后</span>        aa<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>len2<span class="token operator">-</span>len1<span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        bb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>len1<span class="token operator">-</span>len2<span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> carry <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">max</span><span class="token punctuation">(</span>len1<span class="token punctuation">,</span> len2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> digit <span class="token operator">=</span> <span class="token punctuation">(</span>aa<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>bb<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">)</span> <span class="token operator">+</span> carry<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>digit <span class="token operator">>=</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">{</span>carry <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> digit <span class="token operator">%</span><span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 注意每轮都要更新carry的值</span>        <span class="token keyword">else</span> carry <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        aa<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'0'</span> <span class="token operator">+</span> digit<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>carry <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>        aa <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">'1'</span><span class="token punctuation">;</span>    <span class="token function">reverse</span><span class="token punctuation">(</span>aa<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> aa<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> aa<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里忍不住吐槽pat的数据真的弱，这样的一组数据居然没有一项是相加的字符串长度不同的，即100这种倒置后前导0消失的情况，导致我补0的操作一开始写错了（<strong>参数顺序</strong>反了）也过了，还好多测了一组EOJ（EOJ1001 yyds）[<a href="https://acm.ecnu.edu.cn/problem/1001/]" target="_blank" rel="noopener">https://acm.ecnu.edu.cn/problem/1001/]</a>(Problem A+B (Big Integer))，不然以后觉得自己这个函数足够健壮，反复调用就出大丑了。</p><p>其中关于 <code>string add(string aa, string bb)</code> 的函数写法是有一定讲究的。写法非常的多，个人建议以自己习惯为最佳，也能兼顾一下效率（太复杂的操作不要去做，比如强制长串为aa，为此使用swap函数），这样带来的开销其实是不必要的。</p><p>我习惯的写法是<strong>倒置补0法</strong>，考虑到字符串的存储顺序与实际加减相对应，倒置是很便于操作的写法。如若不然，不止写法会臃肿，进位可能带来的多位问题也很难直接加在末尾。这样写无论效率还是复杂度方面，都可圈可点，也很符合个人的习惯，能用梯子就绝不自己搭。进一步的优化我认为在reverse上，对此题而言四次reverse还是不够简洁，可以考虑在算法/数学角度作一定的牺牲来弥补。</p><p>我最初的版本：</p><pre class="line-numbers language-cpp"><code class="language-cpp">string <span class="token function">add</span><span class="token punctuation">(</span>string aa<span class="token punctuation">,</span> string bb<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>aa<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> bb<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span>aa<span class="token punctuation">,</span> bb<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> len1<span class="token operator">=</span>aa<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> len2<span class="token operator">=</span>bb<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">reverse</span><span class="token punctuation">(</span>aa<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> aa<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">reverse</span><span class="token punctuation">(</span>bb<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> bb<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> carry <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len2<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> digit <span class="token operator">=</span> <span class="token punctuation">(</span>aa<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>bb<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">)</span> <span class="token operator">+</span> carry<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>digit <span class="token operator">>=</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">{</span>carry <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> digit <span class="token operator">%</span><span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token punctuation">}</span>        <span class="token keyword">else</span> carry <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        aa<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'0'</span> <span class="token operator">+</span> digit<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>len1 <span class="token operator">==</span> len2 <span class="token operator">&amp;&amp;</span> carry <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>        aa <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">'1'</span><span class="token punctuation">,</span> carry <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> len2<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len1<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> digit <span class="token operator">=</span> <span class="token punctuation">(</span>aa<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">)</span> <span class="token operator">+</span> carry<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>digit <span class="token operator">>=</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">{</span>carry <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> digit <span class="token operator">%</span><span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token punctuation">}</span>            <span class="token keyword">else</span> carry <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            aa<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'0'</span> <span class="token operator">+</span> digit<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>carry <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>        aa <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">'1'</span><span class="token punctuation">;</span>    <span class="token function">reverse</span><span class="token punctuation">(</span>aa<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> aa<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> aa<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>显然是极度屎山的代码，可见代码优化是非常之有必要的一步。</p>]]></content>
      
      
      <categories>
          
          <category> String </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PAT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>keras_2_CNN</title>
      <link href="/2021/08/15/keras-2-cnn/"/>
      <url>/2021/08/15/keras-2-cnn/</url>
      
        <content type="html"><![CDATA[<p>本来是不打算继续完成《<a href="https://www.icourse163.org/course/ZUCC-1206146808?tid=1463541462" target="_blank" rel="noopener"> 深度学习应用开发-TensorFlow实践 </a>》这门课的，然，考虑到两点，1：行百里者半九十，不要半途而废。 2：最后几章与未来研究方向有关，可作引入，扩充内容也正是热点所在，有学习之必要。</p><h1 id="Keras基本过程"><a href="#Keras基本过程" class="headerlink" title="Keras基本过程"></a>Keras基本过程</h1><p>创建Sequential模型<br>根据需要 通过add（）建立神经层<br>编译模型 通过compile（）<br>训练模型 fit（）<br>评估模型 evaluate（）<br>应用 predict（）</p><h3 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h3><p>使用<strong>cifar数据集</strong>进行图片识别，使用了CNN模型，与之前的全连接神经网络有一定的区别：</p><p>CNN（convolutional neural network）卷积神经网络。</p><p>首先，全连接神经网络的弊端主要在于：<strong>参数过多</strong>、容易过拟合。</p><p>CNN正是被提出解决这样的问题、优化网络结构的。</p><p><strong>图像分类</strong>方面，ILSVRC’中，AlexNet-&gt;VGG-&gt;GoogleNet-&gt;ResNet，其中15年的ResNet（高达152层）已经超过了人的分类水准。</p><p>在<strong>物体检测</strong>方面，同样。AlexNet和VGG（RCNN）能达到66%的准确率，ResNet（faster Rcnn）可以达到86%的准确率。</p><h3 id="基本结构："><a href="#基本结构：" class="headerlink" title="基本结构："></a>基本结构：</h3><p><strong>卷积层+降采样层（若干组）+全连接（成一个向量）+传统分类器-&gt;得到结果</strong></p><p><img src="/medias/cnn.png" alt="CNN"></p><p>输入层：每个像素作为一个特征节点输入到网络中</p><p>卷积层：使原信号增强并降低噪音</p><p>降采样层：防止过拟合、减少参数</p><p>全连接层：生成特征进行加权</p><h4 id="卷积"><a href="#卷积" class="headerlink" title="卷积"></a>卷积</h4><p>类似于矩阵的点乘（原图像像素矩阵·卷积核），如果不用0填充，卷积后的结果（特征图）会裁边（5✖5-&gt;3✖3）</p><p>主要作用是<strong>特征提取</strong>，使用不同的卷积核可以提取图像不同角度的特征。要添加不同的卷积核，即<strong>多通道卷积</strong>。然后对特征图相同位置的值进行<strong>累加</strong>，添加<strong>偏置项</strong>生成最终的特征图。</p><p><img src="/medias/convolution.png" alt="Convolution"></p><p>有两个特性：</p><h5 id="局部连接："><a href="#局部连接：" class="headerlink" title="局部连接："></a>局部连接：</h5><p>特征图的每个输出特性不用查看所有输入特性，只用查看部分输入特征。</p><h5 id="权值共享："><a href="#权值共享：" class="headerlink" title="权值共享："></a>权值共享：</h5><p>卷积核在滑动过程中，不发生变化。</p><h5 id="步长（stride）："><a href="#步长（stride）：" class="headerlink" title="步长（stride）："></a>步长（stride）：</h5><p>也是一个有用的概念，同样的图像矩阵、卷积核，不同的步长会生成不同的特征图。有计算公式此处略。步长大于1的卷积也是一种降维。</p><h4 id="池化（pooling）"><a href="#池化（pooling）" class="headerlink" title="池化（pooling）"></a>池化（pooling）</h4><p>卷积层之后添加的降采样层，减少矩阵长、宽从而达到<strong>减少参数</strong>、<strong>避免过拟合</strong>的目的。它是降低特定信号的采样率的过程。</p><h5 id="最大池化、平均池化"><a href="#最大池化、平均池化" class="headerlink" title="最大池化、平均池化"></a>最大池化、平均池化</h5><p>本质都是一种聚合操作，为了合并相似特征达到降维的效果。只是采用的方法不同（max or mean）。</p><p><img src="/medias/pooling.png" alt="Pooling"></p><h2 id="Code："><a href="#Code：" class="headerlink" title="Code："></a>Code：</h2><!--基于tensorflow2.0/keras--><h3 id="首先引用各种包和环境："><a href="#首先引用各种包和环境：" class="headerlink" title="首先引用各种包和环境："></a>首先引用各种包和环境：</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">%</span>matplotlib notebook<span class="token keyword">import</span> tensorflow <span class="token keyword">as</span> tf<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>utils <span class="token keyword">import</span> shuffle<span class="token comment" spellcheck="true"># cifar10 = tf.keras.datasets.cifar10</span><span class="token comment" spellcheck="true"># it's maybe too slow to download this resource sometimes, we will download it by other way.</span><span class="token punctuation">(</span>x_train<span class="token punctuation">,</span> y_train<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>x_test<span class="token punctuation">,</span> y_test<span class="token punctuation">)</span> <span class="token operator">=</span> cifar10<span class="token punctuation">.</span>load_data<span class="token punctuation">(</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="对图像进行标准化"><a href="#对图像进行标准化" class="headerlink" title="对图像进行标准化"></a>对图像进行标准化</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'training data shape:'</span><span class="token punctuation">,</span> x_train<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'training labels shape:'</span><span class="token punctuation">,</span> y_train<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'test data shape:'</span><span class="token punctuation">,</span> x_test<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'test labels shape:'</span><span class="token punctuation">,</span> y_test<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 标准化</span>x_train <span class="token operator">=</span> x_train<span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token string">'float32'</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">255.0</span>x_test <span class="token operator">=</span> x_test<span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token string">'float32'</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">255.0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="建立模型"><a href="#建立模型" class="headerlink" title="建立模型"></a>建立模型</h3><p>包括建立、添加层等等。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># sequential线性堆叠模型</span>model <span class="token operator">=</span> tf<span class="token punctuation">.</span>keras<span class="token punctuation">.</span>models<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 第一个卷积层</span>model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>keras<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>Conv2D<span class="token punctuation">(</span>filters <span class="token operator">=</span> <span class="token number">32</span><span class="token punctuation">,</span>                                 kernel_size <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                 input_shape <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                 activation <span class="token operator">=</span> <span class="token string">'relu'</span><span class="token punctuation">,</span>                                 padding <span class="token operator">=</span> <span class="token string">'same'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 防止过拟合</span>model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>keras<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>Dropout<span class="token punctuation">(</span>rate <span class="token operator">=</span> <span class="token number">0.3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 第一个池化层</span>model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>keras<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>MaxPooling2D<span class="token punctuation">(</span>pool_size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>keras<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>Conv2D<span class="token punctuation">(</span>filters <span class="token operator">=</span> <span class="token number">64</span><span class="token punctuation">,</span>                                 kernel_size <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                 activation <span class="token operator">=</span> <span class="token string">'relu'</span><span class="token punctuation">,</span>                                 padding <span class="token operator">=</span> <span class="token string">'same'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>keras<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>Dropout<span class="token punctuation">(</span>rate <span class="token operator">=</span> <span class="token number">0.3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>keras<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>MaxPooling2D<span class="token punctuation">(</span>pool_size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>keras<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>Flatten<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>keras<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>Dense<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">'softmax'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="设置训练模式"><a href="#设置训练模式" class="headerlink" title="设置训练模式"></a>设置训练模式</h3><pre class="line-numbers language-python"><code class="language-python">train_epochs <span class="token operator">=</span> <span class="token number">8</span>batch_size <span class="token operator">=</span> <span class="token number">100</span>model<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>optimizer<span class="token operator">=</span><span class="token string">'adam'</span><span class="token punctuation">,</span>             loss <span class="token operator">=</span> <span class="token string">'sparse_categorical_crossentropy'</span><span class="token punctuation">,</span>             metrics <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'accuracy'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="开始训练"><a href="#开始训练" class="headerlink" title="开始训练"></a>开始训练</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 训练模型并用字典类型保存训练数据</span>train_history <span class="token operator">=</span> model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>x_train<span class="token punctuation">,</span> y_train<span class="token punctuation">,</span>                         validation_split<span class="token operator">=</span><span class="token number">0.2</span><span class="token punctuation">,</span>                         epochs<span class="token operator">=</span>train_epochs<span class="token punctuation">,</span>                         batch_size<span class="token operator">=</span>batch_size<span class="token punctuation">,</span>                         verbose <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 训练数据 数据标签 验证集划分比例 迭代次数 批次大小 训练过程日志显示（0不显示 1显示进度条 2每epoch一行记录）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这时候已经出训练结果了：</p><blockquote><pre class="line-numbers language-python"><code class="language-python">Epoch <span class="token number">1</span><span class="token operator">/</span><span class="token number">8</span><span class="token number">400</span><span class="token operator">/</span><span class="token number">400</span> <span class="token operator">-</span> 49s <span class="token operator">-</span> loss<span class="token punctuation">:</span> <span class="token number">0.8977</span> <span class="token operator">-</span> accuracy<span class="token punctuation">:</span> <span class="token number">0.6908</span> <span class="token operator">-</span> val_loss<span class="token punctuation">:</span> <span class="token number">1.0401</span> <span class="token operator">-</span> val_accuracy<span class="token punctuation">:</span> <span class="token number">0.6674</span>Epoch <span class="token number">2</span><span class="token operator">/</span><span class="token number">8</span><span class="token number">400</span><span class="token operator">/</span><span class="token number">400</span> <span class="token operator">-</span> 50s <span class="token operator">-</span> loss<span class="token punctuation">:</span> <span class="token number">0.8631</span> <span class="token operator">-</span> accuracy<span class="token punctuation">:</span> <span class="token number">0.7036</span> <span class="token operator">-</span> val_loss<span class="token punctuation">:</span> <span class="token number">0.9957</span> <span class="token operator">-</span> val_accuracy<span class="token punctuation">:</span> <span class="token number">0.6881</span>Epoch <span class="token number">3</span><span class="token operator">/</span><span class="token number">8</span><span class="token number">400</span><span class="token operator">/</span><span class="token number">400</span> <span class="token operator">-</span> 54s <span class="token operator">-</span> loss<span class="token punctuation">:</span> <span class="token number">0.8307</span> <span class="token operator">-</span> accuracy<span class="token punctuation">:</span> <span class="token number">0.7116</span> <span class="token operator">-</span> val_loss<span class="token punctuation">:</span> <span class="token number">0.9918</span> <span class="token operator">-</span> val_accuracy<span class="token punctuation">:</span> <span class="token number">0.6887</span>Epoch <span class="token number">4</span><span class="token operator">/</span><span class="token number">8</span><span class="token number">400</span><span class="token operator">/</span><span class="token number">400</span> <span class="token operator">-</span> 54s <span class="token operator">-</span> loss<span class="token punctuation">:</span> <span class="token number">0.8050</span> <span class="token operator">-</span> accuracy<span class="token punctuation">:</span> <span class="token number">0.7225</span> <span class="token operator">-</span> val_loss<span class="token punctuation">:</span> <span class="token number">0.9672</span> <span class="token operator">-</span> val_accuracy<span class="token punctuation">:</span> <span class="token number">0.6913</span>Epoch <span class="token number">5</span><span class="token operator">/</span><span class="token number">8</span><span class="token number">400</span><span class="token operator">/</span><span class="token number">400</span> <span class="token operator">-</span> 53s <span class="token operator">-</span> loss<span class="token punctuation">:</span> <span class="token number">0.7754</span> <span class="token operator">-</span> accuracy<span class="token punctuation">:</span> <span class="token number">0.7329</span> <span class="token operator">-</span> val_loss<span class="token punctuation">:</span> <span class="token number">0.9289</span> <span class="token operator">-</span> val_accuracy<span class="token punctuation">:</span> <span class="token number">0.7071</span>Epoch <span class="token number">6</span><span class="token operator">/</span><span class="token number">8</span><span class="token number">400</span><span class="token operator">/</span><span class="token number">400</span> <span class="token operator">-</span> 53s <span class="token operator">-</span> loss<span class="token punctuation">:</span> <span class="token number">0.7543</span> <span class="token operator">-</span> accuracy<span class="token punctuation">:</span> <span class="token number">0.7400</span> <span class="token operator">-</span> val_loss<span class="token punctuation">:</span> <span class="token number">0.9225</span> <span class="token operator">-</span> val_accuracy<span class="token punctuation">:</span> <span class="token number">0.7077</span>Epoch <span class="token number">7</span><span class="token operator">/</span><span class="token number">8</span><span class="token number">400</span><span class="token operator">/</span><span class="token number">400</span> <span class="token operator">-</span> 51s <span class="token operator">-</span> loss<span class="token punctuation">:</span> <span class="token number">0.7342</span> <span class="token operator">-</span> accuracy<span class="token punctuation">:</span> <span class="token number">0.7437</span> <span class="token operator">-</span> val_loss<span class="token punctuation">:</span> <span class="token number">0.9214</span> <span class="token operator">-</span> val_accuracy<span class="token punctuation">:</span> <span class="token number">0.6957</span>Epoch <span class="token number">8</span><span class="token operator">/</span><span class="token number">8</span><span class="token number">400</span><span class="token operator">/</span><span class="token number">400</span> <span class="token operator">-</span> 50s <span class="token operator">-</span> loss<span class="token punctuation">:</span> <span class="token number">0.7154</span> <span class="token operator">-</span> accuracy<span class="token punctuation">:</span> <span class="token number">0.7529</span> <span class="token operator">-</span> val_loss<span class="token punctuation">:</span> <span class="token number">0.9190</span> <span class="token operator">-</span> val_accuracy<span class="token punctuation">:</span> <span class="token number">0.6967</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><p>### </p><h3 id="评估模型"><a href="#评估模型" class="headerlink" title="评估模型"></a>评估模型</h3><pre class="line-numbers language-python"><code class="language-python">test_loss<span class="token punctuation">,</span> test_acc <span class="token operator">=</span> model<span class="token punctuation">.</span>evaluate<span class="token punctuation">(</span>x_test<span class="token punctuation">,</span> y_test<span class="token punctuation">,</span> verbose <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Test Accuracy:'</span><span class="token punctuation">,</span> test_acc<span class="token punctuation">)</span>preds <span class="token operator">=</span> model<span class="token punctuation">.</span>predict_classes<span class="token punctuation">(</span>x_test<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>preds<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Keras </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>math_questions</title>
      <link href="/2021/08/07/math-questions/"/>
      <url>/2021/08/07/math-questions/</url>
      
        <content type="html"><![CDATA[<p>d</p><p>更一波数学问题，以一道中值定理题开篇，保留一些还算有价值的数学问题，同时也算作mathType的使用练习。</p><h3 id="Ques1"><a href="#Ques1" class="headerlink" title="Ques1"></a>Ques1</h3><p>FUCk!!shit mathType. 刚下载完就导出不了公式。mathjax也不太会，留坑待填吧。</p><p><img src="/medias/math_1.jpg" alt="math_1"></p>]]></content>
      
      
      <categories>
          
          <category> Math </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>algorithm_1_linklist</title>
      <link href="/2021/07/27/algorithm-1-linklist/"/>
      <url>/2021/07/27/algorithm-1-linklist/</url>
      
        <content type="html"><![CDATA[<p>计划抓紧刷完算法入门+紫书（或黑书）+ 统计学习方法 + 网课，更偏向于刷紫书，黑书做reference用。</p><h4 id="List"><a href="#List" class="headerlink" title="List"></a>List</h4><p>按照算法入门page50的代码复现了链表建立、插入操作。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">struct</span> node<span class="token punctuation">{</span>    <span class="token keyword">int</span> data<span class="token punctuation">;</span>    <span class="token keyword">struct</span> node<span class="token operator">*</span> next<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span> num<span class="token punctuation">;</span>    <span class="token keyword">struct</span> node <span class="token operator">*</span>head<span class="token punctuation">,</span> <span class="token operator">*</span>p<span class="token punctuation">,</span> <span class="token operator">*</span>q<span class="token punctuation">,</span> <span class="token operator">*</span>t<span class="token punctuation">;</span>    head <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    cin <span class="token operator">>></span> num<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// original number of sequence </span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> node<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// apply for a place of memory for node</span>        cin <span class="token operator">>></span> a<span class="token punctuation">;</span>        p <span class="token operator">-</span><span class="token operator">></span> data <span class="token operator">=</span> a<span class="token punctuation">;</span>        p <span class="token operator">-</span><span class="token operator">></span> next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> head <span class="token operator">=</span> p<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// head points at p</span>        <span class="token keyword">else</span> q<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> p<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// make q points at p</span>        q <span class="token operator">=</span> p<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// q => p </span>    <span class="token punctuation">}</span>    cin <span class="token operator">>></span> a<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// the one to be inserted</span>    t <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// p = head; // reserve the former one pointer</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>t<span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token operator">-</span><span class="token operator">></span>next<span class="token operator">-</span><span class="token operator">></span>data <span class="token operator">></span> a<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// find the one to be</span>        <span class="token punctuation">{</span>            p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> node<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            p<span class="token operator">-</span><span class="token operator">></span>data <span class="token operator">=</span> a<span class="token punctuation">;</span>            p<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> t<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>            t<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> p<span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">// free(p);  No need to free, We still need to use it.</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>            t <span class="token operator">=</span> t<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">// cout &lt;&lt; head->data &lt;&lt; endl;</span>    t <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>t <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> t<span class="token operator">-</span><span class="token operator">></span>data <span class="token operator">&lt;&lt;</span> <span class="token string">' '</span><span class="token punctuation">;</span>        t <span class="token operator">=</span> t<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可惜这里代码是存在问题的</p><blockquote><p>case input  </p><p>3</p><p>2 3 4</p><p>1</p><p>output：</p><p>2 1 3 4</p></blockquote><p>显然发生了插入错误的情况，我们要求的是在第一个大于其的数前面插入。</p><p>这里的问题在于把head指针和普通指针看作了一种东西，其实本质上没有问题，但是在插入时候就要分情况写代码，不能一概而论了。</p><p>本来也是很普通的<strong>尾插法</strong>（需要头节点+尾指针），能保证顺序不乱的插入进去。</p><p>而另一种<strong>头插法</strong>只需要头节点即可，但插入后的链表是倒序。</p><p>其实不用特殊的head指针也是可以的，但代码上要稍微冗余一点点。</p><p>针对struct和typedef struct的两种定义方法其实也没有区别，都能定义好节点，个人觉得第一种typedef显得简洁一些。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* case 2struct node{    int data;    struct node* next;};*/</span> <span class="token keyword">typedef</span> <span class="token keyword">struct</span> Node<span class="token punctuation">{</span>    <span class="token keyword">int</span> data<span class="token punctuation">;</span>    Node <span class="token operator">*</span>next<span class="token punctuation">;</span><span class="token punctuation">}</span>NODE<span class="token punctuation">,</span><span class="token operator">*</span>node<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span> num<span class="token punctuation">;</span>    node head<span class="token punctuation">,</span> p<span class="token punctuation">,</span> q<span class="token punctuation">,</span> t<span class="token punctuation">;</span>    head <span class="token operator">=</span> <span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//head = (struct node*)malloc(sizeof(struct node*)); case 2 is also ok</span>    <span class="token comment" spellcheck="true">//head -> next = NULL;  good habit, but not necessary.</span>    q <span class="token operator">=</span> head<span class="token punctuation">;</span>    cin <span class="token operator">>></span> num<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// original number of sequence</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        p <span class="token operator">=</span> <span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// apply for a place of memory for node</span>        cin <span class="token operator">>></span> <span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token operator">></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        p <span class="token operator">-</span><span class="token operator">></span> next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>head<span class="token operator">-</span><span class="token operator">></span>next<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span> head<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> p<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// head points at p</span>        <span class="token keyword">else</span> q<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> p<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// make q points at p</span>        q <span class="token operator">=</span> p<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 尾指针更新</span>    <span class="token punctuation">}</span>    cin <span class="token operator">>></span> a<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// the one to be inserted</span>    t <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>t<span class="token operator">-</span><span class="token operator">></span>next<span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> t<span class="token operator">-</span><span class="token operator">></span>next<span class="token operator">-</span><span class="token operator">></span>data <span class="token operator">&lt;</span> a<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 找到符合条件的插入点，如果都不符合则插最后</span>        t <span class="token operator">=</span> t<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 插入</span>    p <span class="token operator">=</span> <span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    p<span class="token operator">-</span><span class="token operator">></span>data <span class="token operator">=</span> a<span class="token punctuation">;</span>    p<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> t<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>    t<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> p<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//遍历 输出</span>    t <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>t<span class="token operator">-</span><span class="token operator">></span>next<span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> t<span class="token operator">-</span><span class="token operator">></span>next<span class="token operator">-</span><span class="token operator">></span>data <span class="token operator">&lt;&lt;</span> <span class="token string">' '</span><span class="token punctuation">;</span>        t <span class="token operator">=</span> t<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="关于内存分配"><a href="#关于内存分配" class="headerlink" title="关于内存分配"></a>关于内存分配</h3><p>c程序中有五大内存分区：</p><p>栈：默认的存储区，一般都会用栈，由于计算机在底层对栈进行支持，其效率比较高。生长方向向下（内存地址减小），无碎片问题，但空间较小。</p><p>堆：空间大，一般pc能达到4g，同比栈区可能只有1m。分配效率较低，要手动new和delete，不然容易memory leak。生长方向向上（内存地址增大），可能会产生碎片。大量空间分配时用堆更合适。</p><p>自由存储区：用malloc分配的区域。</p><p>全局、静态存储</p><p>常量存储 const</p><p>以C为例，有几个动态内存管理的函数：</p><p>calloc(int num, int size) 返回num个size大小的 <strong>连续</strong>空间 </p><p>free(void *address) 释放</p><p>malloc(int num) 一块</p><p>realloc(void *address, int newsize) 重新分配，扩展到newsize</p><p>返回值都是void*，可以随意进行指针类型转换。</p><h4 id="Hint"><a href="#Hint" class="headerlink" title="Hint"></a>Hint</h4><p>即便是算法书有时候也会写错，更不用说很多网络博客的水平更加参差不齐，而且个人的代码习惯也不同，因此对于一些虽然简单但是还不熟练的程序，还是有必要去写出来加深印象，也留作模板参考的。</p><p>之后考虑用python和cpp一起写几版题解。</p><p><a href="https://www.cnblogs.com/freeurmind/p/9932262.html" target="_blank" rel="noopener"></a>参考了一篇靠谱、易懂的帖子。</p>]]></content>
      
      
      <categories>
          
          <category> 比赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 摘录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>夜</title>
      <link href="/2021/07/26/wu-fa-da-kai-kernel32-lib/"/>
      <url>/2021/07/26/wu-fa-da-kai-kernel32-lib/</url>
      
        <content type="html"><![CDATA[<h4 id="近日"><a href="#近日" class="headerlink" title="近日"></a>近日</h4><p>万籁俱寂、室友已入眠。</p><p>不知从何时起，深夜总能让我去反思、反省很多事情。</p><p>近日实习事情其实并不多。生活上倒是遇到了一些小的波折，同时也有一些感悟，总算说出了一些憋在自己心里许久的话，也给了自己下定决心的勇气，至少一定程度上是。</p><h4 id="博客源何"><a href="#博客源何" class="headerlink" title="博客源何"></a>博客源何</h4><p>开这个博客，又取了一个看似还算上进的域名，其实很大程度上更像是个记事本、说是rubbish bin也不为过。之前也写过csdn、知乎这些online博客。但一来那种博客很难给人有home的安全感。此外有的话也并不想放之于网络上，虽然可能也不会有什么人看得到，但总归有一种不安全感带来的难以畅抒的不快。如果这里写的帖子也有人看得到的话，那只可能有两种情况，Case one是我认为你是The one trusted or willing to share，case two则只能是缘分了、纯纯的缘分。</p><h4 id="谓之聪明"><a href="#谓之聪明" class="headerlink" title="谓之聪明"></a>谓之聪明</h4><p>近日和一位高中的同学聊，其实就是前桌，坐了一年的前桌。这位哥们一直给人的印象就是不食人间烟火，对学习有自己独特的痴迷，虽然其高中成绩并不好，甚至可以说是一直倒数，但从未放弃过，乐此不疲的活在自己的世界里（至少看起来是这样）。这样的学生在当年的理科重点班里是有一些被看不起的，有人maybe会有这样的看法“天天那么学还考的不行，老呆p，脑子不行，不聪明……”。确实，这个有人也包括当时的我。然而，实际上的他，高考发挥的还不错，考入北京某业内强校211通信专业，又把他“猛学”的形象自然带入了大学，这次，他取得了很好的成绩。不仅是gpa靠前、早早加入导师实验室、发ieee论文、进intel实习、去港中文做助研、拿到美帝phd……这样的履历即便放在我们当年的重点班，我相信也没有几位同学可以比得过了，至少，我自己是自愧不如的。</p><p>所以想一想，何为聪明？何为不聪明？同行至今很多“聪明人”反而屡屡受挫，“不聪明人”春风得意，是“越努力越幸运吗”？有理但也不全是，心理学中有这样的说法：能静下心来持之以恒的做好自己的事，这本身就是一种能力，而且是一种非常难得的能力。更多的是我们以前对“聪明”的定义过于狭隘，格局太小了。觉得反应快、学的很轻松的人一定就=聪明，我不否认这样的人也有他们的长处、如果发挥的出来也能很有作为。但这从来不应该是衡量聪明的标杆，知识的积累、厚度、踏实度、持久性……太多的维度才是我们更应该重视的。</p><p>强如阳神、lyq、yjh、ygz……这些我身边的我认为非常有天赋的同学，对待学习的态度也是一丝不苟的，与君共勉，每天都能做好自己该做的事，踏踏实实，如果可以，<strong>请一定要忘记自己是个“聪明人”</strong>。</p><h4 id="With-Her"><a href="#With-Her" class="headerlink" title="With Her"></a>With Her</h4><p>当然最近最重要的，关于感情，或者说这一段我曾经已经以为化为友情的relationship，也算是画下一个句号，不知道是不是自己心中想要的答案，也不知是她的理想与否，但，路总归要继续。Tell the truth。祝福前任，尤其是一段用过心的感情，真的是一件不容易的事情，但我还是要说，希望她一切都好。感情方面，也是。</p><h4 id="呼呼，都忘了正题。"><a href="#呼呼，都忘了正题。" class="headerlink" title="呼呼，都忘了正题。"></a>呼呼，都忘了正题。</h4><p>最近用vs2013做开发时候遇到的一个问题，报错：无法打开<strong>kernel32.lib</strong>，正确的解决方案如下：</p><p> 解决办法：</p><p> 1.添加路径 C:\Program Files (x86)\Microsoft SDKs\Windows\v7.1A\Bin 到项目属性-&gt;配置属性-&gt;VC++目录-&gt;可执行文件目录</p><p> 2.添加路径 C:\Program Files (x86)\Microsoft SDKs\Windows\v7.1A\Lib 到项目属性-&gt;配置属性-&gt;VC++目录-&gt;库目录</p><p>优点：简单易行</p><p>缺点：每次新工程都要如此操作一遍，较为麻烦，至于更方便一劳永逸的配置方法，先占坑，今后学会了再来补。</p><p>晚安。</p>]]></content>
      
      
      <categories>
          
          <category> 感悟 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Qt_3</title>
      <link href="/2021/07/20/qt-3/"/>
      <url>/2021/07/20/qt-3/</url>
      
        <content type="html"><![CDATA[<p>Day3：划水</p><p>主要实现一个同步图画框，并且要保证不能成独立的窗口，这一点就不能用普通的new Mainwindow，首先要加上两个属性 <code>Qt::CustomizeWindowHint | Qt::FramelessWindowHint</code>，内嵌到原来的窗口中。</p><p>至于与原来的窗口同步，这一步看似简单，但并不好做，网上的解决方法五花八门，包括提升控件等级等等，经过测试可能由于不兼容等问题，效果并不好。</p><p>最后的解决方案：先在ui中设置好一个布局，接着用addwidget方法添加即可。</p><p><code>ui.verticalLayout_5 -&gt; addWidget(window);</code></p><p>此时出现一个问题，在ui中设置好的控件设置好槽函数以后，发现每次点击按钮会出现一个问题：重复生成我们要的图像，这里考虑用（1：设置一个int a作为计数器进行计数判断，2：采用setparentNull的方法，具体如下）。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// widget.ui -> </span><span class="token macro property"># <span class="token directive keyword">include</span> <span class="token string">"mainwindow.h"</span></span><span class="token macro property"># <span class="token directive keyword">include</span> <span class="token string">&lt;QMenuBar></span></span><span class="token macro property"># <span class="token directive keyword">include</span> <span class="token string">&lt;QToolBar></span></span><span class="token macro property"># <span class="token directive keyword">include</span> <span class="token string">&lt;QDebug></span></span><span class="token macro property"># <span class="token directive keyword">include</span> <span class="token string">&lt;QPushButton></span></span><span class="token macro property"># <span class="token directive keyword">include</span> <span class="token string">&lt;QLabel></span></span><span class="token macro property"># <span class="token directive keyword">include</span> <span class="token string">&lt;QDockWidget></span></span><span class="token macro property"># <span class="token directive keyword">include</span> <span class="token string">&lt;QTextEdit></span></span><span class="token keyword">void</span> APDTool<span class="token operator">::</span><span class="token function">on_pushButton_showTable_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    QLineSeries <span class="token operator">*</span> series <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QLineSeries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    series <span class="token operator">-</span><span class="token operator">></span> <span class="token function">append</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    series <span class="token operator">-</span><span class="token operator">></span> <span class="token function">append</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// fake data   </span>    <span class="token operator">*</span>series <span class="token operator">&lt;&lt;</span> <span class="token function">QPointF</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token function">QPointF</span><span class="token punctuation">(</span><span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    QChart <span class="token operator">*</span>chart <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QChart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    chart <span class="token operator">-</span><span class="token operator">></span> <span class="token function">legend</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    chart <span class="token operator">-</span><span class="token operator">></span> <span class="token function">addSeries</span><span class="token punctuation">(</span>series<span class="token punctuation">)</span><span class="token punctuation">;</span>    chart <span class="token operator">-</span><span class="token operator">></span> <span class="token function">createDefaultAxes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    chart <span class="token operator">-</span><span class="token operator">></span> <span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token string">"demo gragh"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    QChartView <span class="token operator">*</span>chartView <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">ChartView</span><span class="token punctuation">(</span>chart<span class="token punctuation">)</span><span class="token punctuation">;</span>    chartView <span class="token operator">-</span><span class="token operator">></span> <span class="token function">setRenderHint</span><span class="token punctuation">(</span>QPainter<span class="token operator">::</span>Antialiasing<span class="token punctuation">)</span><span class="token punctuation">;</span>    QMainWindow <span class="token operator">*</span>window <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QMainWindow</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> Qt<span class="token operator">::</span>CustomizeWindowHint <span class="token operator">|</span> Qt<span class="token operator">::</span>FramelessWindowHint<span class="token punctuation">)</span><span class="token punctuation">;</span>    window <span class="token operator">-</span><span class="token operator">></span> <span class="token function">resize</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 删除layout控件里的的元素</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>ui<span class="token punctuation">.</span>verticalLayout_5 <span class="token operator">-</span><span class="token operator">></span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        QWidget <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>ui<span class="token punctuation">.</span>verticalLayout_5 <span class="token operator">-</span><span class="token operator">></span> <span class="token function">itemAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">widget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p <span class="token operator">-</span><span class="token operator">></span> <span class="token function">setParent</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span> <span class="token operator">-</span><span class="token operator">></span> ui<span class="token punctuation">.</span>verticalLayout_5 <span class="token operator">-</span><span class="token operator">></span> <span class="token function">removeWidget</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">delete</span> p<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    ui<span class="token punctuation">.</span>verticalLayout_5 <span class="token operator">-</span><span class="token operator">></span> <span class="token function">addWidget</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 实习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Qt_2</title>
      <link href="/2021/07/18/qt-2/"/>
      <url>/2021/07/18/qt-2/</url>
      
        <content type="html"><![CDATA[<p>实习要用到qt，从0开始学习一下，手写复现部分代码做保存。</p><p>Day2：各种基本控件，以及一些库函数。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// widget.ui -> </span><span class="token macro property"># <span class="token directive keyword">include</span> <span class="token string">"mainwindow.h"</span></span><span class="token macro property"># <span class="token directive keyword">include</span> <span class="token string">&lt;QMenuBar></span></span><span class="token macro property"># <span class="token directive keyword">include</span> <span class="token string">&lt;QToolBar></span></span><span class="token macro property"># <span class="token directive keyword">include</span> <span class="token string">&lt;QDebug></span></span><span class="token macro property"># <span class="token directive keyword">include</span> <span class="token string">&lt;QPushButton></span></span><span class="token macro property"># <span class="token directive keyword">include</span> <span class="token string">&lt;QLabel></span></span><span class="token macro property"># <span class="token directive keyword">include</span> <span class="token string">&lt;QDockWidget></span></span><span class="token macro property"># <span class="token directive keyword">include</span> <span class="token string">&lt;QTextEdit></span></span>MainWindow<span class="token operator">::</span><span class="token function">MainWindow</span><span class="token punctuation">(</span>Qwidget <span class="token operator">*</span>parent<span class="token punctuation">)</span>    <span class="token operator">:</span>  <span class="token function">QMainWindow</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">resize</span><span class="token punctuation">(</span><span class="token number">600</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 提前在ui中设计好了单选钮</span>        <span class="token comment" spellcheck="true">// 单选纽以及lamada函数的简单使用</span>        ui <span class="token operator">-</span><span class="token operator">></span> <span class="token function">setupUi</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 男默认选中</span>        ui <span class="token operator">-</span><span class="token operator">></span> rBtnMan<span class="token operator">-</span><span class="token operator">></span> <span class="token function">setChecked</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 选中女后打印信息，这里要先在ui中把相关按钮的名字改对应 </span>        <span class="token function">connect</span><span class="token punctuation">(</span>ui<span class="token operator">-</span><span class="token operator">></span>rBtnWoman<span class="token punctuation">,</span> <span class="token operator">&amp;</span>QRadioButton<span class="token operator">::</span>clicked<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">=</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">qDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"Now we choosed woman"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 多选按钮 2选中 0未选中, 打印是否选中的状态</span>        <span class="token function">connect</span><span class="token punctuation">(</span>ui<span class="token operator">-</span><span class="token operator">></span>cBox<span class="token punctuation">,</span> <span class="token operator">&amp;</span>QCheckBox<span class="token operator">::</span>stateChanged<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token operator">=</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> state<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">qDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> state<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 列表</span>        QListWidgetItem <span class="token operator">*</span> item <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QListWidgetItem</span><span class="token punctuation">(</span><span class="token string">"寂寞的季节"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 放入到listWidget 控件中</span>        ui<span class="token operator">-</span><span class="token operator">></span>listWidget<span class="token operator">-</span><span class="token operator">></span><span class="token function">addItem</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置居中</span>        item<span class="token operator">-</span><span class="token operator">></span><span class="token function">setTextAlignment</span><span class="token punctuation">(</span>Qt<span class="token operator">::</span>AlignCenter<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 另一种方式制作</span>        QStringList list<span class="token punctuation">;</span>        list <span class="token operator">&lt;&lt;</span> <span class="token string">"寂寞的季节"</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"心是如何慢慢在凋谢"</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"多想向过去告别"</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"当季节不停更迭"</span><span class="token punctuation">;</span>        ui<span class="token operator">-</span><span class="token operator">></span>listWidget<span class="token operator">-</span><span class="token operator">></span><span class="token function">addItem</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// TreeWidget(树形)</span>        ui<span class="token operator">-</span><span class="token operator">></span>treeWidget<span class="token operator">-</span><span class="token operator">></span><span class="token function">setHeaderLabels</span><span class="token punctuation">(</span><span class="token function">QStringList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"head"</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"head2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        QTreeWidgetItem <span class="token operator">*</span> Item1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QTreeWidgetItem</span><span class="token punctuation">(</span><span class="token function">QStringList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"item1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 顶层顶点</span>        ui <span class="token operator">-</span><span class="token operator">></span> treeWidget<span class="token operator">-</span><span class="token operator">></span> <span class="token function">addTopLevelItem</span><span class="token punctuation">(</span>liItem<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 追加子节点</span>        QStringList heroL1<span class="token punctuation">;</span>        heroL1 <span class="token operator">&lt;&lt;</span> <span class="token string">"son node"</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"contends"</span><span class="token punctuation">;</span>        QTreeWidgetItem <span class="token operator">*</span> l1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QTreeWidgetItem</span><span class="token punctuation">(</span>heroL1<span class="token punctuation">)</span><span class="token punctuation">;</span>        Item1<span class="token operator">-</span><span class="token operator">></span><span class="token function">addChild</span><span class="token punctuation">(</span>l1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// TableWidget(表格)</span>        <span class="token comment" spellcheck="true">// QTableWidgit 具体的操作方法基本同上</span>        <span class="token comment" spellcheck="true">// function: </span>        ui<span class="token operator">-</span><span class="token operator">></span> tableWidget<span class="token operator">-</span><span class="token operator">></span> <span class="token function">setColumnCount</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 水平表头</span>        <span class="token function">setHorizontalHeaderLabels</span><span class="token punctuation">(</span><span class="token string">"QStringList()&lt;&lt;"</span><span class="token number">1</span><span class="token string">"&lt;&lt;"</span><span class="token number">2</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 行数</span>        <span class="token function">setRowCount</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 制表内容</span>        QStringList namelist<span class="token punctuation">,</span> sexList<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 接着用以下形式的循环置元素即可</span>        <span class="token function">setItem</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> col<span class="token operator">++</span><span class="token punctuation">,</span> <span class="token function">newQTableWidgetItem</span><span class="token punctuation">(</span>namelist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>MainWindow<span class="token operator">::</span><span class="token operator">~</span><span class="token function">MainWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 实习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Qt_1</title>
      <link href="/2021/07/17/qt-1/"/>
      <url>/2021/07/17/qt-1/</url>
      
        <content type="html"><![CDATA[<p>实习要用到qt，从0开始学习一下，手写复现部分代码做保存。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// QT_MainWindow.cpp</span><span class="token comment" spellcheck="true">// 类似制作一个word菜单页面</span><span class="token comment" spellcheck="true">// 菜单栏最多只有一个</span><span class="token macro property"># <span class="token directive keyword">include</span> <span class="token string">"mainwindow.h"</span></span><span class="token macro property"># <span class="token directive keyword">include</span> <span class="token string">&lt;QMenuBar></span></span><span class="token macro property"># <span class="token directive keyword">include</span> <span class="token string">&lt;QToolBar></span></span><span class="token macro property"># <span class="token directive keyword">include</span> <span class="token string">&lt;QDebug></span></span><span class="token macro property"># <span class="token directive keyword">include</span> <span class="token string">&lt;QPushButton></span></span><span class="token macro property"># <span class="token directive keyword">include</span> <span class="token string">&lt;QLabel></span></span><span class="token macro property"># <span class="token directive keyword">include</span> <span class="token string">&lt;QDockWidget></span></span><span class="token macro property"># <span class="token directive keyword">include</span> <span class="token string">&lt;QTextEdit></span></span>MainWindow<span class="token operator">::</span><span class="token function">MainWindow</span><span class="token punctuation">(</span>Qwidget <span class="token operator">*</span>parent<span class="token punctuation">)</span>    <span class="token operator">:</span>  <span class="token function">QMainWindow</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">resize</span><span class="token punctuation">(</span><span class="token number">600</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建菜单栏</span>        QMenuBar <span class="token operator">*</span> bar <span class="token operator">=</span> <span class="token function">menuBar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 菜单栏放到窗口中</span>        <span class="token function">setMenuBar</span><span class="token punctuation">(</span>bar<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建菜单</span>        QMenu <span class="token operator">*</span> fileMenu <span class="token operator">=</span> bar<span class="token operator">-</span><span class="token operator">></span><span class="token function">addMenu</span><span class="token punctuation">(</span><span class="token string">"文件"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        QMenu <span class="token operator">*</span> editMenu <span class="token operator">=</span> bar<span class="token operator">-</span><span class="token operator">></span><span class="token function">addMenu</span><span class="token punctuation">(</span><span class="token string">"编辑"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建菜单项(子类)</span>        QAction <span class="token operator">*</span> newAction <span class="token operator">=</span> fileMenu<span class="token operator">-</span><span class="token operator">></span><span class="token function">addAction</span><span class="token punctuation">(</span><span class="token string">"新建"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        fileMenu<span class="token operator">-</span><span class="token operator">></span><span class="token function">addSeparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//分隔符</span>        QAction <span class="token operator">*</span> openAction <span class="token operator">=</span> fileMenu<span class="token operator">-</span><span class="token operator">></span><span class="token function">addAction</span><span class="token punctuation">(</span><span class="token string">"打开"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 工具栏 可以有多个</span>        QToolBar <span class="token operator">*</span> toolBar <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QToolBar</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">addToolBar</span><span class="token punctuation">(</span>Qt<span class="token operator">::</span>LeftToolBarArea<span class="token punctuation">,</span> toolBar<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 标记位置</span>        <span class="token comment" spellcheck="true">// 注意可以在reference里搜索函数介绍</span>        <span class="token comment" spellcheck="true">// 设置左右停靠</span>        toolBar<span class="token operator">-</span><span class="token operator">></span><span class="token function">SetAllowedAreas</span><span class="token punctuation">(</span>Qt<span class="token operator">::</span>LeftToolBarArea <span class="token operator">|</span> Qt<span class="token operator">::</span>RightToolBarArea<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置浮动</span>        toolBar<span class="token operator">-</span><span class="token operator">></span><span class="token function">setFloatable</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置移动（总开关）</span>        toolBar<span class="token operator">-</span><span class="token operator">></span><span class="token function">setMoveable</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 工具栏可以设置内容</span>        toolBar<span class="token operator">-</span><span class="token operator">></span><span class="token function">addAction</span><span class="token punctuation">(</span>newAction<span class="token punctuation">)</span><span class="token punctuation">;</span>        fileMenu<span class="token operator">-</span><span class="token operator">></span><span class="token function">addSeparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//分隔符</span>        toolBar<span class="token operator">-</span><span class="token operator">></span><span class="token function">addAction</span><span class="token punctuation">(</span>openAction<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// small widget</span>        QPushButton <span class="token operator">*</span> btn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QPushButton</span><span class="token punctuation">(</span><span class="token string">"aa"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        toolBar <span class="token operator">-</span><span class="token operator">></span> <span class="token function">addWidget</span><span class="token punctuation">(</span>btn<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 状态栏</span>        QstatusBar <span class="token operator">*</span> stBar <span class="token operator">=</span> <span class="token function">statusBar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setStatusBar</span><span class="token punctuation">(</span>stBar<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 放标签控件</span>        QLabel <span class="token operator">*</span> label <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QLabel</span><span class="token punctuation">(</span><span class="token string">"提示信息"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stBar<span class="token operator">-</span><span class="token operator">></span><span class="token function">addWidget</span><span class="token punctuation">(</span>label<span class="token punctuation">)</span><span class="token punctuation">;</span>        QLabel <span class="token operator">*</span> label2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QLabel</span><span class="token punctuation">(</span><span class="token string">"提示信息"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stBar<span class="token operator">-</span><span class="token operator">></span><span class="token function">addPermanentWidget</span><span class="token punctuation">(</span>label2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//铆接部件 浮动窗口 可有多个</span>        QDockWidget <span class="token operator">*</span> dockWidgt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QDockWidget</span><span class="token punctuation">(</span><span class="token string">"fudong"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">addDockWidget</span><span class="token punctuation">(</span>Qt<span class="token operator">::</span>BottomDockWiget<span class="token punctuation">,</span> dockWidget<span class="token punctuation">)</span><span class="token punctuation">;</span>        dockWidget <span class="token operator">-</span><span class="token operator">></span> <span class="token function">setAllowedAreas</span><span class="token punctuation">(</span>Qt<span class="token operator">::</span>TopDockWigetArea<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置中心部件</span>        QTextEdit <span class="token operator">*</span> edit <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QTextEdit</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setCentralWiget</span><span class="token punctuation">(</span>edit<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/////////几种类型</span>        QMessageBox<span class="token operator">::</span><span class="token function">critical</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"critical"</span><span class="token punctuation">,</span> <span class="token string">"错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 信息对话框</span>        QMessageBox<span class="token operator">::</span><span class="token function">information</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"info"</span><span class="token punctuation">,</span> <span class="token string">"信息"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 提问对话框</span>        <span class="token comment" spellcheck="true">// 参数1 父亲  参数2 标题  参数3 提示内容  参数4  按键类型  参数5  默认关联回车按键</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>QMessageBox<span class="token operator">::</span>Save <span class="token operator">==</span> QMessageBox<span class="token operator">::</span><span class="token function">question</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"ques"</span><span class="token punctuation">,</span> <span class="token string">"提问"</span><span class="token punctuation">,</span> QMessageBox<span class="token operator">::</span>Save<span class="token operator">|</span>QMessageBox<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>MainWindow<span class="token operator">::</span><span class="token operator">~</span><span class="token function">MainWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 实习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>competitions_list</title>
      <link href="/2021/07/12/competitions-list/"/>
      <url>/2021/07/12/competitions-list/</url>
      
        <content type="html"><![CDATA[<p>1.微信大数据挑战赛 <a href="https://www.sohu.com/a/463930027_649858" target="_blank" rel="noopener">https://www.sohu.com/a/463930027_649858</a></p><p>–每年4-6月左右报名。</p><p>2.华为顶尖人才校招计划<a href="https://www.bilibili.com/video/BV1tZ4y1F7kt/" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1tZ4y1F7kt/</a></p><p>现在是五月份，可能很多同学还在找实习，但是华为针对22届技术类岗位的顶尖人才招聘计划（又称FX计划、菁英计划）已经开始了。与大家熟悉的天才少年计划不一样的是，顶尖计划的招聘门槛低很多，相比起其他大厂同等级的offer，面试也要容易一些。这个招聘计划给出的薪资非常诱人，且岗位分布全国的一二线城市，但是网上鲜有资料介绍，导致很多同学错过提前批的招聘，所以我在这里给大家简单介绍一下这个计划，并放一段我去年参与该计划面试时的录音，希望能帮助到正在校招的同学们。</p><p>优点：一线二线同酬，竞争力强，分红快（P15起步，P16开始分红，和分红比工资就是零花钱）</p><p>缺点：竞争压力大，需要：国奖级别gpa、顶刊顶会、顶级比赛、开源项目等等。</p>]]></content>
      
      
      <categories>
          
          <category> 比赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 摘录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Keras_1</title>
      <link href="/2021/07/11/keras-1/"/>
      <url>/2021/07/11/keras-1/</url>
      
        <content type="html"><![CDATA[<p>keras官方文档：<a href="https://keras.io/zh/" target="_blank" rel="noopener">https://keras.io/zh/</a></p><p><img src="/medias/keras.jpg" alt="Keras"></p><img src="D:\ecnu_coder\Blog\source\_posts\Keras-1\keras.jpg" alt="keras" style="zoom: 25%;"><p><img src="/keras-1/keras.jpg" alt="Keras"></p><p>作为深度学习方面的高层框架，keras是必须掌握的，在tensorflow到keras的迁移学习中。</p><p>以下为mnist手写数字识别，基于多神经元的keras版实现代码；</p><p>以下为神经网络结构：</p><p><img src="/medias/structure.png" alt="Keras"></p><h1 id="Keras基本过程"><a href="#Keras基本过程" class="headerlink" title="Keras基本过程"></a>Keras基本过程</h1><p>创建Sequential模型<br>根据需要 通过add（）建立神经层<br>编译模型 通过compile（）<br>训练模型 fit（）<br>评估模型 evaluate（）<br>应用 predict（）</p><h2 id="Code："><a href="#Code：" class="headerlink" title="Code："></a>Code：</h2><h3 id="首先引用各种包和环境："><a href="#首先引用各种包和环境：" class="headerlink" title="首先引用各种包和环境："></a>首先引用各种包和环境：</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">%</span>matplotlib notebook<span class="token keyword">import</span> tensorflow <span class="token keyword">as</span> tf<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>utils <span class="token keyword">import</span> shuffle<span class="token comment" spellcheck="true"># 下载mnist数据集</span>mnist <span class="token operator">=</span> tf<span class="token punctuation">.</span>keras<span class="token punctuation">.</span>datasets<span class="token punctuation">.</span>mnist<span class="token punctuation">(</span>train_images<span class="token punctuation">,</span> train_labels<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>test_images<span class="token punctuation">,</span> test_labels<span class="token punctuation">)</span> <span class="token operator">=</span> mnist<span class="token punctuation">.</span>load_data<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="对图像进行标准化以及one-hot编码"><a href="#对图像进行标准化以及one-hot编码" class="headerlink" title="对图像进行标准化以及one-hot编码"></a>对图像进行标准化以及one-hot编码</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 对图像images进行数字标准化</span>train_images <span class="token operator">=</span> train_images <span class="token operator">/</span> <span class="token number">255.0</span>test_images <span class="token operator">=</span> test_images <span class="token operator">/</span> <span class="token number">255.0</span><span class="token comment" spellcheck="true"># labels todo  One-hot encoding</span>train_labels_ohe <span class="token operator">=</span> tf<span class="token punctuation">.</span>one_hot<span class="token punctuation">(</span>train_labels<span class="token punctuation">,</span> depth <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span>test_labels_ohe <span class="token operator">=</span> tf<span class="token punctuation">.</span>one_hot<span class="token punctuation">(</span>test_labels<span class="token punctuation">,</span> depth <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="建立模型"><a href="#建立模型" class="headerlink" title="建立模型"></a>建立模型</h3><p>包括建立、添加层等等。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Set sequential linear model</span>model <span class="token operator">=</span> tf<span class="token punctuation">.</span>keras<span class="token punctuation">.</span>models<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#  添加平坦层/ 输入</span>model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>keras<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>Flatten<span class="token punctuation">(</span>input_shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 添加全连接层1 和 全连接层2</span>model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>keras<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>Dense<span class="token punctuation">(</span>units<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">,</span>                                 kernel_initializer<span class="token operator">=</span><span class="token string">'normal'</span><span class="token punctuation">,</span>                               activation <span class="token operator">=</span> <span class="token string">'relu'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>keras<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>Dense<span class="token punctuation">(</span>units<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">,</span>                                 kernel_initializer<span class="token operator">=</span><span class="token string">'normal'</span><span class="token punctuation">,</span>                               activation <span class="token operator">=</span> <span class="token string">'relu'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># output layer</span>model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>keras<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>Dense<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">'softmax'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上代码是分别建立输入层（784），第一层（64），第二层（32），以及输出层（10）。</p><p>也可以直接建立好所有层：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># also</span><span class="token comment" spellcheck="true"># we can establish our model at once</span>model <span class="token operator">=</span> tf<span class="token punctuation">.</span>keras<span class="token punctuation">.</span>models<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span><span class="token punctuation">[</span>    tf<span class="token punctuation">.</span>keras<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>Flatten<span class="token punctuation">(</span>input_shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    tf<span class="token punctuation">.</span>keras<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>Dense<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span> activation<span class="token operator">=</span>tf<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>relu<span class="token punctuation">)</span><span class="token punctuation">,</span>    tf<span class="token punctuation">.</span>keras<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>Dense<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span> activation<span class="token operator">=</span>tf<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>relu<span class="token punctuation">)</span><span class="token punctuation">,</span>    tf<span class="token punctuation">.</span>keras<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>Dense<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> activation<span class="token operator">=</span>tf<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>softmax<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="设置训练模式"><a href="#设置训练模式" class="headerlink" title="设置训练模式"></a>设置训练模式</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 训练模式</span><span class="token comment" spellcheck="true"># metrics: 评估指标</span>model<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>optimizer<span class="token operator">=</span><span class="token string">'adam'</span><span class="token punctuation">,</span>            loss <span class="token operator">=</span> <span class="token string">'categorical_crossentropy'</span><span class="token punctuation">,</span>             <span class="token comment" spellcheck="true"># loss = 'sparse_categorical_crossentropy', 面向整数标签的keras序列模型</span>             metrics <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'accuracy'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>train_epochs <span class="token operator">=</span> <span class="token number">10</span>batch_size <span class="token operator">=</span> <span class="token number">30</span>  <span class="token comment" spellcheck="true">#  单次训练样本数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="开始训练"><a href="#开始训练" class="headerlink" title="开始训练"></a>开始训练</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 训练模型并用字典类型保存训练数据</span>train_history <span class="token operator">=</span> model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>train_images<span class="token punctuation">,</span> train_labels_ohe<span class="token punctuation">,</span>                         validation_split<span class="token operator">=</span><span class="token number">0.2</span><span class="token punctuation">,</span>                         epochs<span class="token operator">=</span>train_epochs<span class="token punctuation">,</span>                         batch_size <span class="token operator">=</span> batch_size<span class="token punctuation">,</span>                         verbose <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 训练数据 数据标签 验证集划分比例 迭代次数 批次大小 训练过程日志显示（0不显示 1显示进度条 2每epoch一行记录）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这时候已经出训练结果了：</p><blockquote><pre class="line-numbers language-python"><code class="language-python">Epoch <span class="token number">1</span><span class="token operator">/</span><span class="token number">10</span><span class="token number">1600</span><span class="token operator">/</span><span class="token number">1600</span> <span class="token operator">-</span> 2s <span class="token operator">-</span> loss<span class="token punctuation">:</span> <span class="token number">0.3334</span> <span class="token operator">-</span> accuracy<span class="token punctuation">:</span> <span class="token number">0.9040</span> <span class="token operator">-</span> val_loss<span class="token punctuation">:</span> <span class="token number">0.1825</span> <span class="token operator">-</span> val_accuracy<span class="token punctuation">:</span> <span class="token number">0.9492</span>Epoch <span class="token number">2</span><span class="token operator">/</span><span class="token number">10</span><span class="token number">1600</span><span class="token operator">/</span><span class="token number">1600</span> <span class="token operator">-</span> 2s <span class="token operator">-</span> loss<span class="token punctuation">:</span> <span class="token number">0.1535</span> <span class="token operator">-</span> accuracy<span class="token punctuation">:</span> <span class="token number">0.9553</span> <span class="token operator">-</span> val_loss<span class="token punctuation">:</span> <span class="token number">0.1344</span> <span class="token operator">-</span> val_accuracy<span class="token punctuation">:</span> <span class="token number">0.9610</span>Epoch <span class="token number">3</span><span class="token operator">/</span><span class="token number">10</span><span class="token number">1600</span><span class="token operator">/</span><span class="token number">1600</span> <span class="token operator">-</span> 2s <span class="token operator">-</span> loss<span class="token punctuation">:</span> <span class="token number">0.1127</span> <span class="token operator">-</span> accuracy<span class="token punctuation">:</span> <span class="token number">0.9652</span> <span class="token operator">-</span> val_loss<span class="token punctuation">:</span> <span class="token number">0.1123</span> <span class="token operator">-</span> val_accuracy<span class="token punctuation">:</span> <span class="token number">0.9669</span>Epoch <span class="token number">4</span><span class="token operator">/</span><span class="token number">10</span><span class="token number">1600</span><span class="token operator">/</span><span class="token number">1600</span> <span class="token operator">-</span> 2s <span class="token operator">-</span> loss<span class="token punctuation">:</span> <span class="token number">0.0874</span> <span class="token operator">-</span> accuracy<span class="token punctuation">:</span> <span class="token number">0.9731</span> <span class="token operator">-</span> val_loss<span class="token punctuation">:</span> <span class="token number">0.1187</span> <span class="token operator">-</span> val_accuracy<span class="token punctuation">:</span> <span class="token number">0.9651</span>Epoch <span class="token number">5</span><span class="token operator">/</span><span class="token number">10</span><span class="token number">1600</span><span class="token operator">/</span><span class="token number">1600</span> <span class="token operator">-</span> 2s <span class="token operator">-</span> loss<span class="token punctuation">:</span> <span class="token number">0.0733</span> <span class="token operator">-</span> accuracy<span class="token punctuation">:</span> <span class="token number">0.9767</span> <span class="token operator">-</span> val_loss<span class="token punctuation">:</span> <span class="token number">0.1130</span> <span class="token operator">-</span> val_accuracy<span class="token punctuation">:</span> <span class="token number">0.9673</span>Epoch <span class="token number">6</span><span class="token operator">/</span><span class="token number">10</span><span class="token number">1600</span><span class="token operator">/</span><span class="token number">1600</span> <span class="token operator">-</span> 2s <span class="token operator">-</span> loss<span class="token punctuation">:</span> <span class="token number">0.0603</span> <span class="token operator">-</span> accuracy<span class="token punctuation">:</span> <span class="token number">0.9814</span> <span class="token operator">-</span> val_loss<span class="token punctuation">:</span> <span class="token number">0.1056</span> <span class="token operator">-</span> val_accuracy<span class="token punctuation">:</span> <span class="token number">0.9714</span>Epoch <span class="token number">7</span><span class="token operator">/</span><span class="token number">10</span><span class="token number">1600</span><span class="token operator">/</span><span class="token number">1600</span> <span class="token operator">-</span> 2s <span class="token operator">-</span> loss<span class="token punctuation">:</span> <span class="token number">0.0505</span> <span class="token operator">-</span> accuracy<span class="token punctuation">:</span> <span class="token number">0.9837</span> <span class="token operator">-</span> val_loss<span class="token punctuation">:</span> <span class="token number">0.1167</span> <span class="token operator">-</span> val_accuracy<span class="token punctuation">:</span> <span class="token number">0.9690</span>Epoch <span class="token number">8</span><span class="token operator">/</span><span class="token number">10</span><span class="token number">1600</span><span class="token operator">/</span><span class="token number">1600</span> <span class="token operator">-</span> 2s <span class="token operator">-</span> loss<span class="token punctuation">:</span> <span class="token number">0.0443</span> <span class="token operator">-</span> accuracy<span class="token punctuation">:</span> <span class="token number">0.9858</span> <span class="token operator">-</span> val_loss<span class="token punctuation">:</span> <span class="token number">0.1152</span> <span class="token operator">-</span> val_accuracy<span class="token punctuation">:</span> <span class="token number">0.9703</span>Epoch <span class="token number">9</span><span class="token operator">/</span><span class="token number">10</span><span class="token number">1600</span><span class="token operator">/</span><span class="token number">1600</span> <span class="token operator">-</span> 2s <span class="token operator">-</span> loss<span class="token punctuation">:</span> <span class="token number">0.0368</span> <span class="token operator">-</span> accuracy<span class="token punctuation">:</span> <span class="token number">0.9879</span> <span class="token operator">-</span> val_loss<span class="token punctuation">:</span> <span class="token number">0.1175</span> <span class="token operator">-</span> val_accuracy<span class="token punctuation">:</span> <span class="token number">0.9711</span>Epoch <span class="token number">10</span><span class="token operator">/</span><span class="token number">10</span><span class="token number">1600</span><span class="token operator">/</span><span class="token number">1600</span> <span class="token operator">-</span> 2s <span class="token operator">-</span> loss<span class="token punctuation">:</span> <span class="token number">0.0337</span> <span class="token operator">-</span> accuracy<span class="token punctuation">:</span> <span class="token number">0.9893</span> <span class="token operator">-</span> val_loss<span class="token punctuation">:</span> <span class="token number">0.1192</span> <span class="token operator">-</span> val_accuracy<span class="token punctuation">:</span> <span class="token number">0.9702</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><p>可以发现，不仅速度快，其准确率、loss都比自己手动实现的效率更高。</p><h3 id="查看列表记录、生成变化图"><a href="#查看列表记录、生成变化图" class="headerlink" title="查看列表记录、生成变化图"></a>查看列表记录、生成变化图</h3><pre class="line-numbers language-python"><code class="language-python">train_history<span class="token punctuation">.</span>history  <span class="token comment" spellcheck="true"># 查看列表记录</span><span class="token comment" spellcheck="true"># 定义函数进行可视化数据</span><span class="token comment" spellcheck="true"># 用于绘图</span><span class="token keyword">def</span> <span class="token function">show_train_history</span><span class="token punctuation">(</span>train_history<span class="token punctuation">,</span> train_metric<span class="token punctuation">,</span> val_metric<span class="token punctuation">)</span><span class="token punctuation">:</span>    plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>train_history<span class="token punctuation">.</span>history<span class="token punctuation">[</span>train_metric<span class="token punctuation">]</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>train_history<span class="token punctuation">.</span>history<span class="token punctuation">[</span>val_metric<span class="token punctuation">]</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'Train History'</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span>train_metric<span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">'Epoch'</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'train'</span><span class="token punctuation">,</span> <span class="token string">'validation'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> loc <span class="token operator">=</span> <span class="token string">'upper left'</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>show_train_history<span class="token punctuation">(</span>train_history<span class="token punctuation">,</span> <span class="token string">'loss'</span><span class="token punctuation">,</span> <span class="token string">'val_loss'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="评估模型"><a href="#评估模型" class="headerlink" title="评估模型"></a>评估模型</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 评估模型</span>test_loss<span class="token punctuation">,</span> test_acc <span class="token operator">=</span> model<span class="token punctuation">.</span>evaluate<span class="token punctuation">(</span>test_images<span class="token punctuation">,</span> test_labels_ohe<span class="token punctuation">,</span> verbose<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="两种预测方法"><a href="#两种预测方法" class="headerlink" title="两种预测方法"></a>两种预测方法</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># To Predict</span><span class="token comment" spellcheck="true"># first</span>test_pred <span class="token operator">=</span> model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>test_images<span class="token punctuation">)</span>np<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>test_pred<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># second type</span><span class="token comment" spellcheck="true"># 有直接进行分类预测的方法</span>test_pred <span class="token operator">=</span> model<span class="token punctuation">.</span>predict_classes<span class="token punctuation">(</span>test_images<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>test_pred<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">' '</span><span class="token punctuation">,</span> test_labels<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mit-Algorithm-notes</title>
      <link href="/2021/07/11/mit-algorithm-notes/"/>
      <url>/2021/07/11/mit-algorithm-notes/</url>
      
        <content type="html"><![CDATA[<p>算法导论–读书笔记：</p><p>website：<a href="https://open.163.com/newview/movie/free?pid=M6UTT5U0I&amp;mid=M6V2T1JGF" target="_blank" rel="noopener">https://open.163.com/newview/movie/free?pid=M6UTT5U0I&amp;mid=M6V2T1JGF</a></p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开篇集</title>
      <link href="/2021/07/10/kai-pian-ji/"/>
      <url>/2021/07/10/kai-pian-ji/</url>
      
        <content type="html"><![CDATA[<p><img src="/medias/test.jpg" alt></p><h2 id="When？什么时候开始写的？Now！"><a href="#When？什么时候开始写的？Now！" class="headerlink" title="When？什么时候开始写的？Now！"></a>When？什么时候开始写的？Now！</h2><p>你已经使我永生，这样做是你的欢乐。这脆薄的杯儿，你不断地把它倒空，又不断地以新生命来充满。</p><p>这小小的苇笛，你携带着它逾山越谷，从笛管里吹出永新的音乐。</p><p>在你双手的不朽的按抚下，我的小小的心，消融在无边快乐之中，发出不可言说的词调。</p><p>你的无穷的赐予只倾入我小小的手里。时代过去了，你还在倾注，而我的手里还有余量待充满。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
